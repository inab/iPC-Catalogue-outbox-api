<?php

namespace App\Controllers;

use \App\Models\Mugfile as Mugfile;

class ApiController extends Controller {

	public function get_files($request, $response, $args) {

        $userLogin = $request->getAttribute('userLogin');
//$userLogin="t@bsc.es";

        $filters = $request->getQueryParams(); #sort,fields,page,offset,..
        if($filters['limit'] && is_integer((int)$filters['limit']) )
            $limit=(int)$filters['limit'];
        if($filters['sort_by'])
            $sort_by=$filters['sort_by'];
        $files = $this->mugfile->getFiles($userLogin,$limit,$sort_by);

		echo json_encode($files,JSON_PRETTY_PRINT);

	}


	public function get_files_by_id($request, $response, $args) {

		$id        = $args['file_id'];
        $userLogin = $request->getAttribute('userLogin');
//$userLogin="t@bsc.es";
        if ($id){
				
			//$file = new Mugfile($this->container);
			//$file->getFile($id,$userLogin);
            $file = $this->mugfile->getFile($id,$userLogin);
		
			if (!$file->file_id){
				$code = 404;
                $errMsg = "Resource not found. Id=$id; Repository=".$this->global['local_repository'].";";
                if ($userLogin)
                    $errMsg .= " Login=$userLogin;";
				throw new \Exception($errMsg, $code); 
			}
	
			echo json_encode($file,JSON_PRETTY_PRINT);
		
		}
		//return $response;

	}

    public function get_content_by_path($request, $response, $args) {
        $file_path = explode('/', $request->getAttribute('file_path'));
        $filters   = $request->getQueryParams(); #sort,fields,page,offset,..
        $userLogin = $request->getAttribute('userLogin');
        //$userLogin="t@bsc.es";
    }


	public function get_content_by_id($request, $response, $args) {

        $id   = $args['file_id'];
        $userLogin = $request->getAttribute('userLogin');
//$userLogin="t@bsc.es";

        if ($id){

			//get file
			$file = new Mugfile($this->container);
			$file->getFile($id,$userLogin);

			if (!$file->file_id){
				$code = 404;
                $errMsg = "Resource not found. Id=$id; Repository=".$this->global['local_repository'].";";
                if ($userLogin)
                    $errMsg .= " Login=$userLogin;";
				throw new \Exception($errMsg, $code); 
			}


			if (!$file->file_path){
				$code = 422;
				$errMsg = "Attribute 'path' not defined. Id=$id; Repository=".$this->global['local_repository'].";";
                if ($userLogin)
                    $errMsg .= " Login=$userLogin;";
				throw new \Exception($errMsg, $code); 
				
			}

			// Full path
			$rfn = $this->global['dataDir'].$file->file_path;

			if (!is_file($rfn)){
				$code = 422;
				$errMsg = "Resource not available. Id=$id; Repository=".$this->global['local_repository']."; File_path: ".$file->file_path. "; Absolute_path: $rfn;";
			    	$this->logger->error("code $code: error: $errMsg");
				$response = $response->withStatus($code);
				$response = $response->withHeader('Content-Type','application/json');
				$response = $response->withJson(['error' => $errMsg,'code'   => $code]);
				return $response;
				
			}

			$fileExtension = $this->utils->getExtension($file->file_path);
			$mimeTypes     = $this->utils->mimeTypes();
			$contentType = (array_key_exists($fileExtension, $mimeTypes)?$mimeTypes[$fileExtension]:"text/plain");
			$disposition  = "attachment"; // attachment | inline


/*
			header('Content-Length: ' . filesize($rfn));
			header('Content-Description: File Transfer');
			header('Transfer-Encoding: identity');
			header('Content-Type: '.$contentType);
			header('Content-Disposition: '.$disposition.';filename="'.basename($rfn).'"');
			header('Expires: 0');
			header('Cache-Control: must-revalidate');
			header('Pragma: public');
*/
			readfile($rfn);
			$response = $response->withHeader('Content-Type', 'text/plain');

/*
			$response = $response->withHeader('Content-Description', 'File Transfer')
					->withHeader('Content-Type', 'application/octet-stream')
					->withHeader('Content-Disposition', 'attachment;filename="'.basename($rfn).'"')
					->withHeader('Expires', '0')
					->withHeader('Cache-Control', 'must-revalidate')
					->withHeader('Pragma', 'public')
					->withHeader('Content-Length', filesize($rfn));
		
			//readfile($rfn);
			print passthru("/bin/cat \"$rfn\"");
			exit(0);
*/
		}

		return $response;
	}


}

